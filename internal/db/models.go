// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ArtworkCategory string

const (
	ArtworkCategoryFigure      ArtworkCategory = "figure"
	ArtworkCategoryLandscape   ArtworkCategory = "landscape"
	ArtworkCategoryMultiFigure ArtworkCategory = "multi_figure"
	ArtworkCategoryOther       ArtworkCategory = "other"
)

func (e *ArtworkCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArtworkCategory(s)
	case string:
		*e = ArtworkCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ArtworkCategory: %T", src)
	}
	return nil
}

type NullArtworkCategory struct {
	ArtworkCategory ArtworkCategory `json:"artwork_category"`
	Valid           bool            `json:"valid"` // Valid is true if ArtworkCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArtworkCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ArtworkCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArtworkCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArtworkCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArtworkCategory), nil
}

type ArtworkMedium string

const (
	ArtworkMediumOilPanel     ArtworkMedium = "oil_panel"
	ArtworkMediumAcrylicPanel ArtworkMedium = "acrylic_panel"
	ArtworkMediumOilMdf       ArtworkMedium = "oil_mdf"
	ArtworkMediumOilPaper     ArtworkMedium = "oil_paper"
	ArtworkMediumUnknown      ArtworkMedium = "unknown"
)

func (e *ArtworkMedium) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArtworkMedium(s)
	case string:
		*e = ArtworkMedium(s)
	default:
		return fmt.Errorf("unsupported scan type for ArtworkMedium: %T", src)
	}
	return nil
}

type NullArtworkMedium struct {
	ArtworkMedium ArtworkMedium `json:"artwork_medium"`
	Valid         bool          `json:"valid"` // Valid is true if ArtworkMedium is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArtworkMedium) Scan(value interface{}) error {
	if value == nil {
		ns.ArtworkMedium, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArtworkMedium.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArtworkMedium) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArtworkMedium), nil
}

type ArtworkStatus string

const (
	ArtworkStatusSold        ArtworkStatus = "sold"
	ArtworkStatusAvailable   ArtworkStatus = "available"
	ArtworkStatusComingSoon  ArtworkStatus = "coming_soon"
	ArtworkStatusNotForSale  ArtworkStatus = "not_for_sale"
	ArtworkStatusUnavailable ArtworkStatus = "unavailable"
)

func (e *ArtworkStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArtworkStatus(s)
	case string:
		*e = ArtworkStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ArtworkStatus: %T", src)
	}
	return nil
}

type NullArtworkStatus struct {
	ArtworkStatus ArtworkStatus `json:"artwork_status"`
	Valid         bool          `json:"valid"` // Valid is true if ArtworkStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArtworkStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ArtworkStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArtworkStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArtworkStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArtworkStatus), nil
}

type Artwork struct {
	ID             pgtype.UUID      `db:"id" json:"id"`
	Title          string           `db:"title" json:"title"`
	PaintingNumber *int32           `db:"painting_number" json:"painting_number"`
	PaintingYear   *int32           `db:"painting_year" json:"painting_year"`
	WidthInches    pgtype.Numeric   `db:"width_inches" json:"width_inches"`
	HeightInches   pgtype.Numeric   `db:"height_inches" json:"height_inches"`
	PriceCents     *int32           `db:"price_cents" json:"price_cents"`
	Paper          *bool            `db:"paper" json:"paper"`
	SortOrder      *int32           `db:"sort_order" json:"sort_order"`
	SoldAt         pgtype.Timestamp `db:"sold_at" json:"sold_at"`
	Status         ArtworkStatus    `db:"status" json:"status"`
	Medium         ArtworkMedium    `db:"medium" json:"medium"`
	Category       ArtworkCategory  `db:"category" json:"category"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Image struct {
	ID          pgtype.UUID      `db:"id" json:"id"`
	ArtworkID   pgtype.UUID      `db:"artwork_id" json:"artwork_id"`
	ImageUrl    string           `db:"image_url" json:"image_url"`
	ImageWidth  *int32           `db:"image_width" json:"image_width"`
	ImageHeight *int32           `db:"image_height" json:"image_height"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}
