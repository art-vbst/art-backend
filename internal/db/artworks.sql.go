// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artworks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtwork = `-- name: CreateArtwork :one
INSERT INTO artworks (
        title,
        painting_number,
        painting_year,
        width_inches,
        height_inches,
        price_cents,
        paper,
        sort_order,
        sold_at,
        status,
        medium,
        category
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12
    )
RETURNING id, title, painting_number, painting_year, width_inches, height_inches, price_cents, paper, sort_order, sold_at, status, medium, category, created_at, updated_at
`

type CreateArtworkParams struct {
	Title          string           `db:"title" json:"title"`
	PaintingNumber *int32           `db:"painting_number" json:"painting_number"`
	PaintingYear   *int32           `db:"painting_year" json:"painting_year"`
	WidthInches    pgtype.Numeric   `db:"width_inches" json:"width_inches"`
	HeightInches   pgtype.Numeric   `db:"height_inches" json:"height_inches"`
	PriceCents     *int32           `db:"price_cents" json:"price_cents"`
	Paper          *bool            `db:"paper" json:"paper"`
	SortOrder      *int32           `db:"sort_order" json:"sort_order"`
	SoldAt         pgtype.Timestamp `db:"sold_at" json:"sold_at"`
	Status         ArtworkStatus    `db:"status" json:"status"`
	Medium         ArtworkMedium    `db:"medium" json:"medium"`
	Category       ArtworkCategory  `db:"category" json:"category"`
}

func (q *Queries) CreateArtwork(ctx context.Context, arg CreateArtworkParams) (Artwork, error) {
	row := q.db.QueryRow(ctx, createArtwork,
		arg.Title,
		arg.PaintingNumber,
		arg.PaintingYear,
		arg.WidthInches,
		arg.HeightInches,
		arg.PriceCents,
		arg.Paper,
		arg.SortOrder,
		arg.SoldAt,
		arg.Status,
		arg.Medium,
		arg.Category,
	)
	var i Artwork
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PaintingNumber,
		&i.PaintingYear,
		&i.WidthInches,
		&i.HeightInches,
		&i.PriceCents,
		&i.Paper,
		&i.SortOrder,
		&i.SoldAt,
		&i.Status,
		&i.Medium,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtwork = `-- name: GetArtwork :one
SELECT a.id, a.title, a.painting_number, a.painting_year, a.width_inches, a.height_inches, a.price_cents, a.paper, a.sort_order, a.sold_at, a.status, a.medium, a.category, a.created_at, a.updated_at,
    i.image_id, i.image_url, i.image_width, i.image_height, i.image_created_at
FROM artworks a
    LEFT JOIN LATERAL (
        SELECT id as image_id,
            image_url,
            image_width,
            image_height,
            created_at as image_created_at
        FROM images
        WHERE artwork_id = a.id
        ORDER BY is_main_image DESC NULLS LAST,
            created_at
        LIMIT 1
    ) i ON true
WHERE a.id = $1
`

type GetArtworkRow struct {
	ID             pgtype.UUID      `db:"id" json:"id"`
	Title          string           `db:"title" json:"title"`
	PaintingNumber *int32           `db:"painting_number" json:"painting_number"`
	PaintingYear   *int32           `db:"painting_year" json:"painting_year"`
	WidthInches    pgtype.Numeric   `db:"width_inches" json:"width_inches"`
	HeightInches   pgtype.Numeric   `db:"height_inches" json:"height_inches"`
	PriceCents     *int32           `db:"price_cents" json:"price_cents"`
	Paper          *bool            `db:"paper" json:"paper"`
	SortOrder      *int32           `db:"sort_order" json:"sort_order"`
	SoldAt         pgtype.Timestamp `db:"sold_at" json:"sold_at"`
	Status         ArtworkStatus    `db:"status" json:"status"`
	Medium         ArtworkMedium    `db:"medium" json:"medium"`
	Category       ArtworkCategory  `db:"category" json:"category"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	ImageID        pgtype.UUID      `db:"image_id" json:"image_id"`
	ImageUrl       string           `db:"image_url" json:"image_url"`
	ImageWidth     *int32           `db:"image_width" json:"image_width"`
	ImageHeight    *int32           `db:"image_height" json:"image_height"`
	ImageCreatedAt pgtype.Timestamp `db:"image_created_at" json:"image_created_at"`
}

func (q *Queries) GetArtwork(ctx context.Context, id pgtype.UUID) (GetArtworkRow, error) {
	row := q.db.QueryRow(ctx, getArtwork, id)
	var i GetArtworkRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PaintingNumber,
		&i.PaintingYear,
		&i.WidthInches,
		&i.HeightInches,
		&i.PriceCents,
		&i.Paper,
		&i.SortOrder,
		&i.SoldAt,
		&i.Status,
		&i.Medium,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageID,
		&i.ImageUrl,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.ImageCreatedAt,
	)
	return i, err
}

const getArtworkRaw = `-- name: GetArtworkRaw :one
SELECT id, title, painting_number, painting_year, width_inches, height_inches, price_cents, paper, sort_order, sold_at, status, medium, category, created_at, updated_at
FROM artworks
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetArtworkRaw(ctx context.Context, id pgtype.UUID) (Artwork, error) {
	row := q.db.QueryRow(ctx, getArtworkRaw, id)
	var i Artwork
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PaintingNumber,
		&i.PaintingYear,
		&i.WidthInches,
		&i.HeightInches,
		&i.PriceCents,
		&i.Paper,
		&i.SortOrder,
		&i.SoldAt,
		&i.Status,
		&i.Medium,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtworkWithImages = `-- name: GetArtworkWithImages :many
SELECT a.id, a.title, a.painting_number, a.painting_year, a.width_inches, a.height_inches, a.price_cents, a.paper, a.sort_order, a.sold_at, a.status, a.medium, a.category, a.created_at, a.updated_at,
    i.id as image_id,
    i.is_main_image,
    i.image_url,
    i.image_width,
    i.image_height,
    i.created_at as image_created_at
FROM artworks a
    LEFT JOIN images i ON a.id = i.artwork_id
WHERE a.id = $1
ORDER BY i.created_at
`

type GetArtworkWithImagesRow struct {
	ID             pgtype.UUID      `db:"id" json:"id"`
	Title          string           `db:"title" json:"title"`
	PaintingNumber *int32           `db:"painting_number" json:"painting_number"`
	PaintingYear   *int32           `db:"painting_year" json:"painting_year"`
	WidthInches    pgtype.Numeric   `db:"width_inches" json:"width_inches"`
	HeightInches   pgtype.Numeric   `db:"height_inches" json:"height_inches"`
	PriceCents     *int32           `db:"price_cents" json:"price_cents"`
	Paper          *bool            `db:"paper" json:"paper"`
	SortOrder      *int32           `db:"sort_order" json:"sort_order"`
	SoldAt         pgtype.Timestamp `db:"sold_at" json:"sold_at"`
	Status         ArtworkStatus    `db:"status" json:"status"`
	Medium         ArtworkMedium    `db:"medium" json:"medium"`
	Category       ArtworkCategory  `db:"category" json:"category"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	ImageID        pgtype.UUID      `db:"image_id" json:"image_id"`
	IsMainImage    *bool            `db:"is_main_image" json:"is_main_image"`
	ImageUrl       *string          `db:"image_url" json:"image_url"`
	ImageWidth     *int32           `db:"image_width" json:"image_width"`
	ImageHeight    *int32           `db:"image_height" json:"image_height"`
	ImageCreatedAt pgtype.Timestamp `db:"image_created_at" json:"image_created_at"`
}

func (q *Queries) GetArtworkWithImages(ctx context.Context, id pgtype.UUID) ([]GetArtworkWithImagesRow, error) {
	rows, err := q.db.Query(ctx, getArtworkWithImages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArtworkWithImagesRow
	for rows.Next() {
		var i GetArtworkWithImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PaintingNumber,
			&i.PaintingYear,
			&i.WidthInches,
			&i.HeightInches,
			&i.PriceCents,
			&i.Paper,
			&i.SortOrder,
			&i.SoldAt,
			&i.Status,
			&i.Medium,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageID,
			&i.IsMainImage,
			&i.ImageUrl,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ImageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtworks = `-- name: ListArtworks :many
SELECT a.id, a.title, a.painting_number, a.painting_year, a.width_inches, a.height_inches, a.price_cents, a.paper, a.sort_order, a.sold_at, a.status, a.medium, a.category, a.created_at, a.updated_at,
    i.image_id, i.image_url, i.image_width, i.image_height, i.image_created_at
FROM artworks a
    LEFT JOIN LATERAL (
        SELECT id as image_id,
            image_url,
            image_width,
            image_height,
            created_at as image_created_at
        FROM images
        WHERE artwork_id = a.id
        ORDER BY is_main_image DESC NULLS LAST,
            created_at
        LIMIT 1
    ) i ON true
ORDER BY a.sort_order,
    a.created_at DESC
`

type ListArtworksRow struct {
	ID             pgtype.UUID      `db:"id" json:"id"`
	Title          string           `db:"title" json:"title"`
	PaintingNumber *int32           `db:"painting_number" json:"painting_number"`
	PaintingYear   *int32           `db:"painting_year" json:"painting_year"`
	WidthInches    pgtype.Numeric   `db:"width_inches" json:"width_inches"`
	HeightInches   pgtype.Numeric   `db:"height_inches" json:"height_inches"`
	PriceCents     *int32           `db:"price_cents" json:"price_cents"`
	Paper          *bool            `db:"paper" json:"paper"`
	SortOrder      *int32           `db:"sort_order" json:"sort_order"`
	SoldAt         pgtype.Timestamp `db:"sold_at" json:"sold_at"`
	Status         ArtworkStatus    `db:"status" json:"status"`
	Medium         ArtworkMedium    `db:"medium" json:"medium"`
	Category       ArtworkCategory  `db:"category" json:"category"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	ImageID        pgtype.UUID      `db:"image_id" json:"image_id"`
	ImageUrl       string           `db:"image_url" json:"image_url"`
	ImageWidth     *int32           `db:"image_width" json:"image_width"`
	ImageHeight    *int32           `db:"image_height" json:"image_height"`
	ImageCreatedAt pgtype.Timestamp `db:"image_created_at" json:"image_created_at"`
}

func (q *Queries) ListArtworks(ctx context.Context) ([]ListArtworksRow, error) {
	rows, err := q.db.Query(ctx, listArtworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArtworksRow
	for rows.Next() {
		var i ListArtworksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PaintingNumber,
			&i.PaintingYear,
			&i.WidthInches,
			&i.HeightInches,
			&i.PriceCents,
			&i.Paper,
			&i.SortOrder,
			&i.SoldAt,
			&i.Status,
			&i.Medium,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageID,
			&i.ImageUrl,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ImageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtworksRaw = `-- name: ListArtworksRaw :many
SELECT id, title, painting_number, painting_year, width_inches, height_inches, price_cents, paper, sort_order, sold_at, status, medium, category, created_at, updated_at
FROM artworks
ORDER BY sort_order,
    created_at DESC
`

func (q *Queries) ListArtworksRaw(ctx context.Context) ([]Artwork, error) {
	rows, err := q.db.Query(ctx, listArtworksRaw)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artwork
	for rows.Next() {
		var i Artwork
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PaintingNumber,
			&i.PaintingYear,
			&i.WidthInches,
			&i.HeightInches,
			&i.PriceCents,
			&i.Paper,
			&i.SortOrder,
			&i.SoldAt,
			&i.Status,
			&i.Medium,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
