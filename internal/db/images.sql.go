// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: images.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countImagesByArtwork = `-- name: CountImagesByArtwork :one
SELECT COUNT(*)
FROM images
WHERE artwork_id = $1
`

func (q *Queries) CountImagesByArtwork(ctx context.Context, artworkID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countImagesByArtwork, artworkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO images (
        artwork_id,
        image_url,
        image_width,
        image_height
    )
VALUES ($1, $2, $3, $4)
RETURNING id, artwork_id, image_url, image_width, image_height, created_at, updated_at
`

type CreateImageParams struct {
	ArtworkID   pgtype.UUID `db:"artwork_id" json:"artwork_id"`
	ImageUrl    string      `db:"image_url" json:"image_url"`
	ImageWidth  *int32      `db:"image_width" json:"image_width"`
	ImageHeight *int32      `db:"image_height" json:"image_height"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.ArtworkID,
		arg.ImageUrl,
		arg.ImageWidth,
		arg.ImageHeight,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ArtworkID,
		&i.ImageUrl,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteImagesByArtwork = `-- name: DeleteImagesByArtwork :exec
DELETE FROM images
WHERE artwork_id = $1
`

func (q *Queries) DeleteImagesByArtwork(ctx context.Context, artworkID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteImagesByArtwork, artworkID)
	return err
}

const getFirstImageByArtwork = `-- name: GetFirstImageByArtwork :one
SELECT id, artwork_id, image_url, image_width, image_height, created_at, updated_at
FROM images
WHERE artwork_id = $1
ORDER BY created_at
LIMIT 1
`

func (q *Queries) GetFirstImageByArtwork(ctx context.Context, artworkID pgtype.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getFirstImageByArtwork, artworkID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ArtworkID,
		&i.ImageUrl,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, artwork_id, image_url, image_width, image_height, created_at, updated_at
FROM images
WHERE id = $1
`

func (q *Queries) GetImage(ctx context.Context, id pgtype.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ArtworkID,
		&i.ImageUrl,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listImagesByArtwork = `-- name: ListImagesByArtwork :many
SELECT id, artwork_id, image_url, image_width, image_height, created_at, updated_at
FROM images
WHERE artwork_id = $1
ORDER BY created_at
`

func (q *Queries) ListImagesByArtwork(ctx context.Context, artworkID pgtype.UUID) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImagesByArtwork, artworkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ArtworkID,
			&i.ImageUrl,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET image_url = COALESCE($1, image_url),
    image_width = COALESCE($2, image_width),
    image_height = COALESCE($3, image_height),
    updated_at = current_timestamp
WHERE id = $4
RETURNING id, artwork_id, image_url, image_width, image_height, created_at, updated_at
`

type UpdateImageParams struct {
	ImageUrl    *string     `db:"image_url" json:"image_url"`
	ImageWidth  *int32      `db:"image_width" json:"image_width"`
	ImageHeight *int32      `db:"image_height" json:"image_height"`
	ID          pgtype.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImage,
		arg.ImageUrl,
		arg.ImageWidth,
		arg.ImageHeight,
		arg.ID,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ArtworkID,
		&i.ImageUrl,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
