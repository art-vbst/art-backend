// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
        stripe_session_id,
        stripe_payment_intent_id,
        customer_email,
        shipping_rate_id,
        shipping_name,
        shipping_address_line1,
        shipping_address_line2,
        shipping_city,
        shipping_postal_code,
        shipping_state,
        shipping_country,
        subtotal_cents,
        shipping_cents,
        total_cents,
        currency,
        status
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16
    )
RETURNING id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
`

type CreateOrderParams struct {
	StripeSessionID       *string     `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID *string     `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	CustomerEmail         string      `db:"customer_email" json:"customer_email"`
	ShippingRateID        string      `db:"shipping_rate_id" json:"shipping_rate_id"`
	ShippingName          string      `db:"shipping_name" json:"shipping_name"`
	ShippingAddressLine1  string      `db:"shipping_address_line1" json:"shipping_address_line1"`
	ShippingAddressLine2  *string     `db:"shipping_address_line2" json:"shipping_address_line2"`
	ShippingCity          string      `db:"shipping_city" json:"shipping_city"`
	ShippingPostalCode    string      `db:"shipping_postal_code" json:"shipping_postal_code"`
	ShippingState         string      `db:"shipping_state" json:"shipping_state"`
	ShippingCountry       string      `db:"shipping_country" json:"shipping_country"`
	SubtotalCents         int32       `db:"subtotal_cents" json:"subtotal_cents"`
	ShippingCents         int32       `db:"shipping_cents" json:"shipping_cents"`
	TotalCents            int32       `db:"total_cents" json:"total_cents"`
	Currency              string      `db:"currency" json:"currency"`
	Status                OrderStatus `db:"status" json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.StripeSessionID,
		arg.StripePaymentIntentID,
		arg.CustomerEmail,
		arg.ShippingRateID,
		arg.ShippingName,
		arg.ShippingAddressLine1,
		arg.ShippingAddressLine2,
		arg.ShippingCity,
		arg.ShippingPostalCode,
		arg.ShippingState,
		arg.ShippingCountry,
		arg.SubtotalCents,
		arg.ShippingCents,
		arg.TotalCents,
		arg.Currency,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CustomerEmail,
		&i.ShippingRateID,
		&i.ShippingName,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingPostalCode,
		&i.ShippingState,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CustomerEmail,
		&i.ShippingRateID,
		&i.ShippingName,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingPostalCode,
		&i.ShippingState,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByStripePaymentIntentID = `-- name: GetOrderByStripePaymentIntentID :one
SELECT id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
FROM orders
WHERE stripe_payment_intent_id = $1
`

func (q *Queries) GetOrderByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID *string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByStripePaymentIntentID, stripePaymentIntentID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CustomerEmail,
		&i.ShippingRateID,
		&i.ShippingName,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingPostalCode,
		&i.ShippingState,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByStripeSessionID = `-- name: GetOrderByStripeSessionID :one
SELECT id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
FROM orders
WHERE stripe_session_id = $1
`

func (q *Queries) GetOrderByStripeSessionID(ctx context.Context, stripeSessionID *string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByStripeSessionID, stripeSessionID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CustomerEmail,
		&i.ShippingRateID,
		&i.ShippingName,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingPostalCode,
		&i.ShippingState,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
FROM orders
ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CustomerEmail,
			&i.ShippingRateID,
			&i.ShippingName,
			&i.ShippingAddressLine1,
			&i.ShippingAddressLine2,
			&i.ShippingCity,
			&i.ShippingPostalCode,
			&i.ShippingState,
			&i.ShippingCountry,
			&i.SubtotalCents,
			&i.ShippingCents,
			&i.TotalCents,
			&i.Currency,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, stripe_session_id, stripe_payment_intent_id, customer_email, shipping_rate_id, shipping_name, shipping_address_line1, shipping_address_line2, shipping_city, shipping_postal_code, shipping_state, shipping_country, subtotal_cents, shipping_cents, total_cents, currency, status, created_at
`

type UpdateOrderStatusParams struct {
	ID     pgtype.UUID `db:"id" json:"id"`
	Status OrderStatus `db:"status" json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CustomerEmail,
		&i.ShippingRateID,
		&i.ShippingName,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingPostalCode,
		&i.ShippingState,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
