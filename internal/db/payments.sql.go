// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
        order_id,
        stripe_payment_intent_id,
        subtotal_cents,
        shipping_cents,
        shipping_stripe_id,
        total_cents,
        currency,
        status
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    )
RETURNING id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
`

type CreatePaymentParams struct {
	OrderID               pgtype.UUID   `db:"order_id" json:"order_id"`
	StripePaymentIntentID string        `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	SubtotalCents         int32         `db:"subtotal_cents" json:"subtotal_cents"`
	ShippingCents         int32         `db:"shipping_cents" json:"shipping_cents"`
	ShippingStripeID      string        `db:"shipping_stripe_id" json:"shipping_stripe_id"`
	TotalCents            int32         `db:"total_cents" json:"total_cents"`
	Currency              string        `db:"currency" json:"currency"`
	Status                PaymentStatus `db:"status" json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.StripePaymentIntentID,
		arg.SubtotalCents,
		arg.ShippingCents,
		arg.ShippingStripeID,
		arg.TotalCents,
		arg.Currency,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.ShippingStripeID,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
FROM payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.ShippingStripeID,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
FROM payments
WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.ShippingStripeID,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentByStripePaymentIntentID = `-- name: GetPaymentByStripePaymentIntentID :one
SELECT id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
FROM payments
WHERE stripe_payment_intent_id = $1
`

func (q *Queries) GetPaymentByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByStripePaymentIntentID, stripePaymentIntentID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.ShippingStripeID,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
FROM payments
ORDER BY created_at DESC
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.StripePaymentIntentID,
			&i.SubtotalCents,
			&i.ShippingCents,
			&i.ShippingStripeID,
			&i.TotalCents,
			&i.Currency,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET status = $2
WHERE id = $1
RETURNING id, order_id, stripe_payment_intent_id, subtotal_cents, shipping_cents, shipping_stripe_id, total_cents, currency, status, created_at
`

type UpdatePaymentStatusParams struct {
	ID     pgtype.UUID   `db:"id" json:"id"`
	Status PaymentStatus `db:"status" json:"status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatus, arg.ID, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.ShippingStripeID,
		&i.TotalCents,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
