// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
        order_id,
        stripe_payment_intent_id,
        status,
        total_cents,
        currency,
        paid_at
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, order_id, stripe_payment_intent_id, status, total_cents, currency, created_at, paid_at
`

type CreatePaymentParams struct {
	OrderID               uuid.UUID        `db:"order_id" json:"order_id"`
	StripePaymentIntentID string           `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	Status                PaymentStatus    `db:"status" json:"status"`
	TotalCents            int32            `db:"total_cents" json:"total_cents"`
	Currency              string           `db:"currency" json:"currency"`
	PaidAt                pgtype.Timestamp `db:"paid_at" json:"paid_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.StripePaymentIntentID,
		arg.Status,
		arg.TotalCents,
		arg.Currency,
		arg.PaidAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.TotalCents,
		&i.Currency,
		&i.CreatedAt,
		&i.PaidAt,
	)
	return i, err
}
