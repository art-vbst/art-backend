// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
WITH new_order AS (
    INSERT INTO orders (
        stripe_session_id,
        status
    ) VALUES (
        $1,
        $2
    ) RETURNING id, stripe_session_id, status, created_at
),
new_payment_requirement AS (
    INSERT INTO payment_requirements (
        order_id,
        subtotal_cents,
        shipping_cents,
        total_cents,
        currency
    ) VALUES (
        (SELECT id FROM new_order),
        $3,
        $4,
        $5,
        $6
    ) RETURNING id, order_id, subtotal_cents, shipping_cents, total_cents, currency
),
new_shipping_details AS (
    INSERT INTO shipping_details (
        order_id,
        email,
        name,
        line1,
        line2,
        city,
        state,
        postal,
        country
    ) VALUES (
        (SELECT id FROM new_order),
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14
    ) RETURNING id, order_id, email, name, line1, line2, city, state, postal, country
)
SELECT 
    new_order.id as order_id,
    new_order.stripe_session_id,
    new_order.status,
    new_order.created_at,
    new_payment_requirement.id as payment_requirement_id,
    new_payment_requirement.subtotal_cents,
    new_payment_requirement.shipping_cents,
    new_payment_requirement.total_cents,
    new_payment_requirement.currency,
    new_shipping_details.id as shipping_details_id,
    new_shipping_details.email,
    new_shipping_details.name,
    new_shipping_details.line1,
    new_shipping_details.line2,
    new_shipping_details.city,
    new_shipping_details.state,
    new_shipping_details.postal,
    new_shipping_details.country
FROM new_order, new_payment_requirement, new_shipping_details
`

type CreateOrderParams struct {
	StripeSessionID string      `db:"stripe_session_id" json:"stripe_session_id"`
	Status          OrderStatus `db:"status" json:"status"`
	SubtotalCents   int32       `db:"subtotal_cents" json:"subtotal_cents"`
	ShippingCents   int32       `db:"shipping_cents" json:"shipping_cents"`
	TotalCents      int32       `db:"total_cents" json:"total_cents"`
	Currency        string      `db:"currency" json:"currency"`
	Email           string      `db:"email" json:"email"`
	Name            string      `db:"name" json:"name"`
	Line1           string      `db:"line1" json:"line1"`
	Line2           *string     `db:"line2" json:"line2"`
	City            string      `db:"city" json:"city"`
	State           string      `db:"state" json:"state"`
	Postal          string      `db:"postal" json:"postal"`
	Country         string      `db:"country" json:"country"`
}

type CreateOrderRow struct {
	OrderID              uuid.UUID        `db:"order_id" json:"order_id"`
	StripeSessionID      string           `db:"stripe_session_id" json:"stripe_session_id"`
	Status               OrderStatus      `db:"status" json:"status"`
	CreatedAt            pgtype.Timestamp `db:"created_at" json:"created_at"`
	PaymentRequirementID uuid.UUID        `db:"payment_requirement_id" json:"payment_requirement_id"`
	SubtotalCents        int32            `db:"subtotal_cents" json:"subtotal_cents"`
	ShippingCents        int32            `db:"shipping_cents" json:"shipping_cents"`
	TotalCents           int32            `db:"total_cents" json:"total_cents"`
	Currency             string           `db:"currency" json:"currency"`
	ShippingDetailsID    uuid.UUID        `db:"shipping_details_id" json:"shipping_details_id"`
	Email                string           `db:"email" json:"email"`
	Name                 string           `db:"name" json:"name"`
	Line1                string           `db:"line1" json:"line1"`
	Line2                *string          `db:"line2" json:"line2"`
	City                 string           `db:"city" json:"city"`
	State                string           `db:"state" json:"state"`
	Postal               string           `db:"postal" json:"postal"`
	Country              string           `db:"country" json:"country"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CreateOrderRow, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.StripeSessionID,
		arg.Status,
		arg.SubtotalCents,
		arg.ShippingCents,
		arg.TotalCents,
		arg.Currency,
		arg.Email,
		arg.Name,
		arg.Line1,
		arg.Line2,
		arg.City,
		arg.State,
		arg.Postal,
		arg.Country,
	)
	var i CreateOrderRow
	err := row.Scan(
		&i.OrderID,
		&i.StripeSessionID,
		&i.Status,
		&i.CreatedAt,
		&i.PaymentRequirementID,
		&i.SubtotalCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Currency,
		&i.ShippingDetailsID,
		&i.Email,
		&i.Name,
		&i.Line1,
		&i.Line2,
		&i.City,
		&i.State,
		&i.Postal,
		&i.Country,
	)
	return i, err
}
